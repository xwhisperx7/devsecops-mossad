name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build_scan:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # disable shallow clone for SonarQube
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: "Preflight: echo and curl SonarQube"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          set -e
          echo "SONAR_HOST_URL=[$SONAR_HOST_URL]"   # brackets help spot trailing spaces
          echo "SONAR_TOKEN length: ${#SONAR_TOKEN}"
          echo "== Server version =="
          curl -iS "$SONAR_HOST_URL/api/server/version"
          echo "== Token validate =="
          curl -iS -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/authentication/validate"

          
      - name: Debug Sonar URL being used
        run: |
          echo "From secrets -> $SONAR_HOST_URL"
          if [ -f sonar-project.properties ]; then
            echo "sonar-project.properties (keys of interest):"
            grep -nE '^(sonar\.host\.url|sonar\.projectKey|sonar\.sources)=' sonar-project.properties || true
          else
            echo "sonar-project.properties not found in repo root"
          fi
          echo "Server version via curl:"
          curl -s "$SONAR_HOST_URL/api/server/version" && echo
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # Optionally wait for quality gate
      # - name: SonarQube Quality Gate
      #   uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  iac_deploy:
    runs-on: self-hosted
    needs: build_scan
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform format
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform init
        run: terraform init -input=false
      - name: Terraform validate
        run: terraform validate -no-color
      - name: Terraform plan
        run: terraform plan -no-color -input=false
      - name: Terraform apply
        # Auto-approve for demo; remove -auto-approve to require manual approval
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_remote_host: ${{ secrets.TF_VAR_remote_host }}
          TF_VAR_remote_user: ${{ secrets.TF_VAR_remote_user }}
          TF_VAR_private_key: ${{ secrets.TF_VAR_private_key }}
          # Inicia un agente SSH e importa tu clave privada (sin Docker)
          
      - name: Start SSH agent and add key (no Docker)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.TF_VAR_private_key }}
      
      # Añade la huella del host al known_hosts para evitar prompts
      - name: Add host key to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.TF_VAR_remote_host }}" >> ~/.ssh/known_hosts
      
      # Copia index.html por SCP y recarga nginx por SSH
      - name: Deploy index.html over SSH
        env:
          HOST: ${{ secrets.TF_VAR_remote_host }}
          USER: ${{ secrets.TF_VAR_remote_user }}
        run: |
          # ajusta ./index.html si está en otra ruta del repo
          scp -P 22 ./index.html "${USER}@${HOST}:/home/${USER}/index.html"
          ssh -p 22 "${USER}@${HOST}" \
            "sudo mkdir -p /var/www/devsecops && \
             sudo mv /home/${USER}/index.html /var/www/devsecops/index.html && \
             sudo chown root:root /var/www/devsecops/index.html && \
             sudo systemctl reload nginx"


