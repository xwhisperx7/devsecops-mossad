name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build_scan:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # disable shallow clone for SonarQube
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: "Preflight: echo and curl SonarQube"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          set -e
          echo "SONAR_HOST_URL=[$SONAR_HOST_URL]"   # brackets help spot trailing spaces
          echo "SONAR_TOKEN length: ${#SONAR_TOKEN}"
          echo "== Server version =="
          curl -iS "$SONAR_HOST_URL/api/server/version"
          echo "== Token validate =="
          curl -iS -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/authentication/validate"

          
      - name: Debug Sonar URL being used
        run: |
          echo "From secrets -> $SONAR_HOST_URL"
          if [ -f sonar-project.properties ]; then
            echo "sonar-project.properties (keys of interest):"
            grep -nE '^(sonar\.host\.url|sonar\.projectKey|sonar\.sources)=' sonar-project.properties || true
          else
            echo "sonar-project.properties not found in repo root"
          fi
          echo "Server version via curl:"
          curl -s "$SONAR_HOST_URL/api/server/version" && echo
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # Optionally wait for quality gate
      # - name: SonarQube Quality Gate
      #   uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
  iac_deploy:
    runs-on: self-hosted
    needs: build_scan
    environment: production

    # Variables que usará Terraform
    env:
      TF_VAR_remote_host:  ${{ secrets.TF_VAR_remote_host }}   # p.ej. 127.0.0.1
      TF_VAR_remote_user:  ${{ secrets.TF_VAR_remote_user }}   # p.ej. vagrant
      TF_VAR_private_key_path: ~/.ssh/vagrant_key              # ruta que leerá main.tf

    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0

      # 1) Asegurar que exista el cliente SSH
      - name: Ensure SSH client
        run: |
          if ! command -v ssh >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y --no-install-recommends openssh-client
          fi
          which ssh || true
          ssh -V || true

      # 2) Preparar la clave de Vagrant en ~/.ssh
      - name: Prepare SSH key (use Vagrant key on the runner)
        run: |
          mkdir -p ~/.ssh
          install -m 600 /vagrant/.vagrant/machines/default/virtualbox/private_key ~/.ssh/vagrant_key
          chmod 700 ~/.ssh
          ls -l ~/.ssh

      # 3) Comprobación de SSH (ahora debería pasar)
      - name: Preflight SSH (verbose)
        run: |
          ssh -vv -i ~/.ssh/vagrant_key -o StrictHostKeyChecking=no \
            "${{ env.TF_VAR_remote_user }}@${{ env.TF_VAR_remote_host }}" \
            "echo OK && id && hostname"

      # 4) Terraform sin wrapper
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
          terraform_wrapper: false

      - name: Terraform format
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform plan
        run: terraform plan -no-color -input=false

      - name: Terraform apply
        run: terraform apply -auto-approve -input=false
          scp -i ~/.ssh/vagrant_key ./index.html vagrant@127.0.0.1:/home/vagrant/index.html
          ssh -i ~/.ssh/vagrant_key vagrant@127.0.0.1 'sudo mv /home/vagrant/index.html /var/www/devsecops/index.html && sudo systemctl reload nginx'
  
  
      
      
      
       
