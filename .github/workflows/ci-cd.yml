name: CI/CD Pipeline
on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build_scan:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # disable shallow clone for SonarQube
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: "Preflight: echo and curl SonarQube"
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          set -e
          echo "SONAR_HOST_URL=[$SONAR_HOST_URL]"   # brackets help spot trailing spaces
          echo "SONAR_TOKEN length: ${#SONAR_TOKEN}"
          echo "== Server version =="
          curl -iS "$SONAR_HOST_URL/api/server/version"
          echo "== Token validate =="
          curl -iS -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/authentication/validate"

          
      - name: Debug Sonar URL being used
        run: |
          echo "From secrets -> $SONAR_HOST_URL"
          if [ -f sonar-project.properties ]; then
            echo "sonar-project.properties (keys of interest):"
            grep -nE '^(sonar\.host\.url|sonar\.projectKey|sonar\.sources)=' sonar-project.properties || true
          else
            echo "sonar-project.properties not found in repo root"
          fi
          echo "Server version via curl:"
          curl -s "$SONAR_HOST_URL/api/server/version" && echo
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      # Optionally wait for quality gate
      # - name: SonarQube Quality Gate
      #   uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      
  iac_deploy:
      runs-on: self-hosted
      needs: build_scan
      environment: production
  
      # Only the vars Terraform actually uses:
      env:
        TF_VAR_remote_host: ${{ secrets.TF_VAR_remote_host }}
        TF_VAR_remote_user: ${{ secrets.TF_VAR_remote_user }}
        TF_VAR_private_key_path: $HOME/.ssh/vagrant_key 
  
      steps:
        - uses: actions/checkout@v4
          with:
              clean: true        # borra archivos/ carpetas no versionados de ejecuciones anteriores
              fetch-depth: 0     # trae el historial completo (útil para herramientas/plan)
        
        # Put the Vagrant key where Terraform will read it
        - name: Prepare SSH key (use Vagrant key on the runner)
          run: |
            mkdir -p ~/.ssh
            install -m 600 /vagrant/.vagrant/machines/default/virtualbox/private_key ~/.ssh/vagrant_key
            chmod 700 ~/.ssh
  
        # Optional SSH preflight
        - name: Preflight SSH (verbose)
          run: |
            ssh -vv -i ~/.ssh/vagrant_key -o StrictHostKeyChecking=no vagrant@127.0.0.1 \
              "echo OK && id && hostname"
            - name: Debug: show TF files the runner sees
            run: |
              echo "== Commit en runner =="
              git rev-parse HEAD
              git show --name-only --oneline -1
              echo ""
              echo "== Archivos *.tf =="
              git ls-files '*.tf'
              echo ""
              echo "== Contenido con numeración de main.tf (primeras 60 líneas) =="
              nl -ba main.tf | sed -n '1,60p' || true
              echo ""
              echo "== Grep exacto en main.tf =="
              grep -nE '^\s*variable\s*"private_key"' main.tf || echo "NO encontrado"

        # Guardrail: fail fast if a root module still declares `variable "private_key"`
        - name: Guard – ensure no 'variable "private_key"' in TF
          run: |
            if grep -R --line-number --include="*.tf" 'variable *"private_key"' .; then
              echo "::error::Found a declaration of variable \"private_key\" in the root module. Remove it."
              exit 1
            fi
  
        # Terraform without the Node wrapper
        - name: Set up Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: 1.7.5
            terraform_wrapper: false
  
        - name: Terraform format
          run: terraform fmt -check
          continue-on-error: true
  
        - name: Terraform init
          run: terraform init -input=false
  
        - name: Terraform validate
          run: terraform validate -no-color
  
        - name: Terraform plan
          run: terraform plan -no-color -input=false
  
        - name: Terraform apply
          run: terraform apply -auto-approve -input=false
    
    
    
     
